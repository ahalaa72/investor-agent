{
  "name": "AI Agent - Simplified (Working)",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ai-agent-report",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-1",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [250, 300],
      "webhookId": "ai-agent-report"
    },
    {
      "parameters": {
        "jsCode": "// ========================================\n// AI AGENT ALL-IN-ONE CODE\n// ========================================\n\n// Configuration\nconst BRIDGE_URL = 'http://host.docker.internal:8000';\nconst OPENAI_API_KEY = 'YOUR_OPENAI_KEY_HERE'; // Replace with your actual key\nconst MODEL = 'gpt-4o';\n\n// Get user query from webhook\nconst userQuery = $input.first().json.body.query || $input.first().json.body.message || \"What are the top market gainers today?\";\n\nconsole.log('User Query:', userQuery);\n\ntry {\n  // ========================================\n  // STEP 1: Fetch Available MCP Tools\n  // ========================================\n  console.log('Step 1: Fetching tools from bridge...');\n  \n  const toolsResponse = await fetch(`${BRIDGE_URL}/tools`);\n  if (!toolsResponse.ok) {\n    throw new Error(`Failed to fetch tools: ${toolsResponse.status} ${toolsResponse.statusText}`);\n  }\n  \n  const toolsData = await toolsResponse.json();\n  const tools = toolsData.tools;\n  \n  console.log(`Found ${tools.length} tools`);\n  \n  // Convert to OpenAI function calling format\n  const openaiTools = tools.map(tool => ({\n    type: \"function\",\n    function: {\n      name: tool.name,\n      description: tool.description,\n      parameters: tool.parameters\n    }\n  }));\n  \n  // ========================================\n  // STEP 2: Ask AI to Decide Which Tools to Use\n  // ========================================\n  console.log('Step 2: Asking AI which tools to use...');\n  \n  const systemPrompt = `You are an expert financial analyst and investment advisor. Your job is to:\n\n1. Analyze the user's query\n2. Determine which financial data tools to call to gather comprehensive information\n3. Call the appropriate tools with correct parameters\n\nYou have access to tools for:\n- Real-time stock prices and market data\n- Financial statements and metrics\n- News and analyst recommendations\n- Insider trading activity\n- Market sentiment indicators\n- Technical analysis\n\nCall multiple tools if needed to gather complete information for your analysis.`;\n  \n  const aiDecisionResponse = await fetch('https://api.openai.com/v1/chat/completions', {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${OPENAI_API_KEY}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      model: MODEL,\n      messages: [\n        { role: 'system', content: systemPrompt },\n        { role: 'user', content: userQuery }\n      ],\n      tools: openaiTools,\n      tool_choice: 'auto',\n      temperature: 0.3\n    })\n  });\n  \n  if (!aiDecisionResponse.ok) {\n    const errorText = await aiDecisionResponse.text();\n    throw new Error(`OpenAI API error: ${aiDecisionResponse.status} - ${errorText}`);\n  }\n  \n  const aiDecision = await aiDecisionResponse.json();\n  const message = aiDecision.choices[0].message;\n  \n  console.log('AI Decision:', JSON.stringify(message, null, 2));\n  \n  // Check if AI wants to call tools\n  if (!message.tool_calls || message.tool_calls.length === 0) {\n    // AI answered directly without needing tools\n    return {\n      json: {\n        query: userQuery,\n        report: message.content,\n        timestamp: new Date().toISOString(),\n        tools_used: [],\n        note: \"AI provided answer without additional data gathering\"\n      }\n    };\n  }\n  \n  // ========================================\n  // STEP 3: Execute the Tools the AI Requested\n  // ========================================\n  console.log(`Step 3: Executing ${message.tool_calls.length} tool(s)...`);\n  \n  const toolResults = [];\n  \n  for (const toolCall of message.tool_calls) {\n    const toolName = toolCall.function.name;\n    let args;\n    \n    try {\n      args = typeof toolCall.function.arguments === 'string' \n        ? JSON.parse(toolCall.function.arguments)\n        : toolCall.function.arguments;\n    } catch (e) {\n      console.error(`Failed to parse arguments for ${toolName}:`, e);\n      args = {};\n    }\n    \n    console.log(`Calling tool: ${toolName} with args:`, args);\n    \n    try {\n      const toolResponse = await fetch(`${BRIDGE_URL}/call`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          tool_name: toolName,\n          arguments: args\n        })\n      });\n      \n      if (!toolResponse.ok) {\n        throw new Error(`Tool call failed: ${toolResponse.status} ${toolResponse.statusText}`);\n      }\n      \n      const toolData = await toolResponse.json();\n      \n      toolResults.push({\n        role: 'tool',\n        tool_call_id: toolCall.id,\n        name: toolName,\n        content: JSON.stringify(toolData.result, null, 2)\n      });\n      \n      console.log(`Tool ${toolName} executed successfully`);\n      \n    } catch (error) {\n      console.error(`Error calling tool ${toolName}:`, error);\n      toolResults.push({\n        role: 'tool',\n        tool_call_id: toolCall.id,\n        name: toolName,\n        content: JSON.stringify({ error: error.message })\n      });\n    }\n  }\n  \n  // ========================================\n  // STEP 4: Ask AI to Synthesize Final Report\n  // ========================================\n  console.log('Step 4: Asking AI to synthesize final report...');\n  \n  const synthesisPrompt = `Now that you have gathered the data, create a comprehensive investment report with:\n\n## Executive Summary\n[Brief overview and key recommendation]\n\n## Key Findings\n[Specific data points and metrics from the tools you called]\n\n## Financial Analysis\n[Detailed analysis using your financial expertise]\n\n## Risk Assessment\n[Identify and explain potential risks]\n\n## Recommendation\n[Clear BUY/HOLD/SELL recommendation with reasoning]\n\nUse markdown formatting. Be specific with numbers and data points.`;\n  \n  const synthesisResponse = await fetch('https://api.openai.com/v1/chat/completions', {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${OPENAI_API_KEY}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      model: MODEL,\n      messages: [\n        { role: 'system', content: systemPrompt },\n        { role: 'user', content: userQuery },\n        message,  // The assistant's response with tool_calls\n        ...toolResults  // The tool results\n      ],\n      temperature: 0.3,\n      max_tokens: 4000\n    })\n  });\n  \n  if (!synthesisResponse.ok) {\n    const errorText = await synthesisResponse.text();\n    throw new Error(`OpenAI synthesis error: ${synthesisResponse.status} - ${errorText}`);\n  }\n  \n  const synthesis = await synthesisResponse.json();\n  const finalReport = synthesis.choices[0].message.content;\n  \n  console.log('Report generated successfully');\n  \n  // ========================================\n  // STEP 5: Return Final Result\n  // ========================================\n  return {\n    json: {\n      query: userQuery,\n      report: finalReport,\n      timestamp: new Date().toISOString(),\n      tools_used: message.tool_calls.map(tc => tc.function.name),\n      model: MODEL,\n      usage: synthesis.usage\n    }\n  };\n  \n} catch (error) {\n  console.error('Error in AI Agent:', error);\n  \n  return {\n    json: {\n      error: true,\n      message: error.message,\n      query: userQuery,\n      timestamp: new Date().toISOString()\n    }\n  };\n}"
      },
      "id": "ai-agent-code",
      "name": "AI Agent (All-in-One)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [470, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "id": "respond-webhook",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [690, 300]
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "AI Agent (All-in-One)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent (All-in-One)": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-10-26T00:00:00.000Z",
  "versionId": "1"
}
